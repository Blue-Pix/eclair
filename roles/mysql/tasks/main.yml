- name: check if mariadb already installed
  yum:
    list=mariadb-libs
  register: pkg

- name: uninstall pre-installed mariadb
  yum:
    name: mariadb-libs
    state: absent

- name: remove pre-installed mariadb file
  file:
    path: /var/lib/mysql
    state: absent
  when: pkg.results[0].yumstate == 'installed'

- name: install MySQL yum repository
  yum: 
    name: "{{ mysql_repo_url }}"
    state: present

- name: intall yum-utils (MySQL5.6 specific process)
  yum:
    name: yum-utils
    state: present
  when: mysql_version == 5.6

- name: switch yum repository (MySQL5.6 specific process)
  shell: |
    yum-config-manager --disable mysql57-community
    yum-config-manager --enable mysql56-community
  when: mysql_version == 5.6

- name: install MySQL{{ mysql_version }}
  yum:
    name: "{{ item }}"
    enablerepo: "{{ mysql_repo_name }}"
    state: present
  with_items:
    - mysql
    - mysql-devel
    - mysql-server
    - mysql-utilities
    - MySQL-python

- name: start and enable
  service:
    name: mysqld
    state: started
    enabled: yes

- name: check if /root/.my.cnf already deployed
  stat:
    path: /root/.my.cnf
  register: mysql_root_conf_file

- name: get default MySQL root users's password
  shell: |
    less /var/log/mysqld.log | grep password | awk '{ print $NF }'
  register: mysql_default_password
  when: not mysql_root_conf_file.stat.exists

- name: change password policy
  shell: |
    mysql -u root -p'{{ mysql_default_password.stdout }}' --connect-expired-password -e "SET GLOBAL validate_password_length=4;"
    mysql -u root -p'{{ mysql_default_password.stdout }}' --connect-expired-password -e "SET GLOBAL validate_password_policy='{{ mysql_password_policy }}';"
    mysql -u root -p'{{ mysql_default_password.stdout }}' --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'tmppassw0rd';"
    mysql -u root -p'tmppassw0rd' --connect-expired-password -e "uninstall plugin validate_password;"
  when: not mysql_root_conf_file.stat.exists

- name: change MySQL root user's password
  shell: |
    mysql -u root -p'tmppassw0rd' --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ mysql_root_new_password }}';"
  when: not mysql_root_conf_file.stat.exists
# mysql -u root -p'{{ mysql_default_password.stdout }}' --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ mysql_root_new_password }}';"

- name: deploy MySQL root user's .my.cnf
  template:
    src: root.my.cnf.j2
    dest: "/root/.my.cnf"
    owner: root
    group: root
    mode: 0600

- name: check if my.cnf.bk already deployed
  stat:
    path: "/etc/my.cnf.bk"
  register: mysql_conf_backup_file

- name: backup default my.cnf
  shell: |
    mv /etc/my.cnf /etc/my.cnf.bk
  when: not mysql_conf_backup_file.stat.exists

- name: deploy my.cnf
  template:
    src: my.cnf.j2
    dest: "/etc/my.cnf"
    owner: root
    group: root
    mode: 0644
  when: not mysql_conf_backup_file.stat.exists
  notify: restart mysqld

# - name: create database [{{ project_db_name }}]
#   mysql_db:
#     name: "{{ project_db_name }}"
#     state: present
#     encoding: "{{ project_db_encoding }}"

# - name: create MySQL user [{{ project_db_user_name }}] for database [{{ project_db_name }}]
#   mysql_user:
#     login_user: root
#     login_password: "{{ mysql_root_new_password }}"
#     user: "{{ project_db_user_name }}"
#     password: "{{ project_db_user_password }}"
#     host: localhost
#     priv: "{{ project_db_name }}.*:ALL,GRANT"
#     state: present
